import json
import aiohttp
import config
from create_bot import bot
from cashews import cache
import sqlite3

conn = sqlite3.connect('database.db')
cache.setup("mem://", size=1024)

user_state = {}
condition_dict = {
    'clear': ['—è—Å–Ω–æ', '‚òÄÔ∏è'],
    'partly-cloudy': ['–º–∞–ª–æ–æ–±–ª–∞—á–Ω–æ', 'üå§'],
    'cloudy': ['–æ–±–ª–∞—á–Ω–æ —Å –ø—Ä–æ—è—Å–Ω–µ–Ω–∏—è–º–∏', '‚õÖÔ∏è'],
    'overcast': ['–ø–∞—Å–º—É—Ä–Ω–æ', 'üå•'],
    'drizzle': ['–º–æ—Ä–æ—Å—å', 'üå¶'],
    'light-rain': ['–Ω–µ–±–æ–ª—å—à–æ–π –¥–æ–∂–¥—å', 'üå¶'],
    'rain': ['–¥–æ–∂–¥—å', 'üåß'],
    'moderate-rain': ['—É–º–µ—Ä–µ–Ω–Ω–æ —Å–∏–ª—å–Ω—ã–π –¥–æ–∂–¥—å', 'üåß'],
    'heavy-rain': ['—Å–∏–ª—å–Ω—ã–π –¥–æ–∂–¥—å', 'üåß'],
    'continuous-heavy-rain': ['–¥–ª–∏—Ç–µ–ª—å–Ω—ã–π —Å–∏–ª—å–Ω—ã–π –¥–æ–∂–¥—å', 'üåß'],
    'showers': ['–ª–∏–≤–µ–Ω—å', 'üåß'],
    'wet-snow': ['–¥–æ–∂–¥—å —Å–æ —Å–Ω–µ–≥–æ–º', 'üå®'],
    'light-snow': ['–Ω–µ–±–æ–ª—å—à–æ–π —Å–Ω–µ–≥', 'üå®'],
    'snow': ['—Å–Ω–µ–≥', '‚ùÑÔ∏è'],
    'snow-showers': ['—Å–Ω–µ–≥–æ–ø–∞–¥', '‚ùÑÔ∏è'],
    'hail': ['–≥—Ä–∞–¥', 'üå®'],
    'thunderstorm': ['–≥—Ä–æ–∑–∞', 'üå©'],
    'thunderstorm-with-rain': ['–¥–æ–∂–¥—å —Å –≥—Ä–æ–∑–æ–π', '‚õà'],
    'thunderstorm-with-hail': ['–≥—Ä–æ–∑–∞ —Å –≥—Ä–∞–¥–æ–º', 'üå©']
}
good_weather = ['clear', 'partly-cloudy', 'cloudy', 'overcast', 'drizzle']
bad_weather = ['light-rain', 'rain', 'moderate-rain', 'heavy-rain',
               'continuous-heavy-rain', 'showers', 'wet-snow', 'light-snow',
               'snow', 'snow-showers', 'hail', 'thunderstorm', 'thunderstorm-with-rain',
               'thunderstorm-with-hail']


@cache(ttl='1h')
async def get_weather(user_id, lat, lon) -> dict:
    url = f"https://api.weather.yandex.ru/v2/forecast?lat={lat}&lon={lon}&lang=ru_RU"
    headers = {
        "X-Yandex-API-Key": config.weather_key
    }
    async with aiohttp.ClientSession() as session:
        async with session.get(url, headers=headers) as response:
            if response.status == 200:
                data = await response.json()
            else:
                print(f"–û—à–∏–±–∫–∞ –∑–∞–ø—Ä–æ—Å–∞: {response.status}")
                data = {}
    # with open('dump2.json', 'w',  encoding="utf-8") as file:
    #     json.dump(data, file,indent=3,ensure_ascii=False )
    # data = json.load(file)
    return data


def text_render(state, weather):
    date_texts = ['–°–µ–≥–æ–¥–Ω—è', '–ó–∞–≤—Ç—Ä–∞', '–ü–æ—Å–ª–µ–∑–∞–≤—Ç—Ä–∞']

    city = weather['geo_object']['locality']['name']
    date = weather['forecasts'][state]['date']
    morning = weather['forecasts'][state]['parts']['morning']
    day = weather['forecasts'][state]['parts']['day']
    evening = weather['forecasts'][state]['parts']['evening']

    if state <= 2:
        date_text = date_texts[state]
    else:
        date_text = '–ü—Ä–æ–≥–Ω–æ–∑ –Ω–∞'

    if state == 0:
        fact = weather['fact']
        now_text = f"{condition_dict[fact['condition']][1]}–°–µ–π—á–∞—Å {fact['temp']}¬∞C {condition_dict[fact['condition']][0]}\n–í–µ—Ç–µ—Ä {fact['wind_speed']}–º/—Å\n"
        date_text, date = '', ''
    else:
        now_text = ''

    text = f'''
{city}
{date_text} {date}
{now_text}
{condition_dict[morning['condition']][1]}–£—Ç—Ä–æ–º: {morning['temp_avg']}¬∞C {condition_dict[morning['condition']][0]}
{condition_dict[day['condition']][1]}–î–Ω—ë–º: {day['temp_avg']}¬∞C {condition_dict[day['condition']][0]}
{condition_dict[evening['condition']][1]}–í–µ—á–µ—Ä–æ–º: {evening['temp_avg']}¬∞C {condition_dict[evening['condition']][0]}
'''
    return text


def user_info_update(user_id, lat, lon):
    cur = conn.execute("SELECT * FROM main_1 WHERE id = ?", (user_id,))
    row = cur.fetchone()
    print(row)
    if row:
        sql = "UPDATE main_1 SET lat = ?, lon = ? WHERE id = ?"
        data = (lat, lon, user_id)
    else:
        sql = "INSERT INTO main_1 (id, lat, lon) VALUES (?, ?, ?)"
        data = (user_id, lat, lon)
    conn.execute(sql, data)
    conn.commit()


def user_info_get(user_id):
    cur = conn.execute("SELECT * FROM main_1 WHERE id = ?", (user_id,))
    row = cur.fetchone()
    return row
